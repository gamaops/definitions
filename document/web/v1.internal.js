/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.document.v1.internal.DocumentRule', null, global);
goog.exportSymbol('proto.document.v1.internal.DocumentRule.Limits', null, global);
goog.exportSymbol('proto.document.v1.internal.setDocumentRuleRequest', null, global);
goog.exportSymbol('proto.document.v1.internal.setDocumentRuleResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.document.v1.internal.DocumentRule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.document.v1.internal.DocumentRule.repeatedFields_, null);
};
goog.inherits(proto.document.v1.internal.DocumentRule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.document.v1.internal.DocumentRule.displayName = 'proto.document.v1.internal.DocumentRule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.document.v1.internal.DocumentRule.Limits = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.document.v1.internal.DocumentRule.Limits, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.document.v1.internal.DocumentRule.Limits.displayName = 'proto.document.v1.internal.DocumentRule.Limits';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.document.v1.internal.setDocumentRuleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.document.v1.internal.setDocumentRuleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.document.v1.internal.setDocumentRuleRequest.displayName = 'proto.document.v1.internal.setDocumentRuleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.document.v1.internal.setDocumentRuleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.document.v1.internal.setDocumentRuleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.document.v1.internal.setDocumentRuleResponse.displayName = 'proto.document.v1.internal.setDocumentRuleResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.document.v1.internal.DocumentRule.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.document.v1.internal.DocumentRule.prototype.toObject = function(opt_includeInstance) {
  return proto.document.v1.internal.DocumentRule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.document.v1.internal.DocumentRule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.DocumentRule.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentKind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limits: (f = msg.getLimits()) && proto.document.v1.internal.DocumentRule.Limits.toObject(includeInstance, f),
    allowedaudiencesList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.document.v1.internal.DocumentRule}
 */
proto.document.v1.internal.DocumentRule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.document.v1.internal.DocumentRule;
  return proto.document.v1.internal.DocumentRule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.document.v1.internal.DocumentRule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.document.v1.internal.DocumentRule}
 */
proto.document.v1.internal.DocumentRule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocumentKind(value);
      break;
    case 2:
      var value = new proto.document.v1.internal.DocumentRule.Limits;
      reader.readMessage(value,proto.document.v1.internal.DocumentRule.Limits.deserializeBinaryFromReader);
      msg.setLimits(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addAllowedaudiences(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.document.v1.internal.DocumentRule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.document.v1.internal.DocumentRule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.document.v1.internal.DocumentRule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.DocumentRule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimits();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.document.v1.internal.DocumentRule.Limits.serializeBinaryToWriter
    );
  }
  f = message.getAllowedAudiencesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.document.v1.internal.DocumentRule.Limits.prototype.toObject = function(opt_includeInstance) {
  return proto.document.v1.internal.DocumentRule.Limits.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.document.v1.internal.DocumentRule.Limits} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.DocumentRule.Limits.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxValueCount: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.document.v1.internal.DocumentRule.Limits}
 */
proto.document.v1.internal.DocumentRule.Limits.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.document.v1.internal.DocumentRule.Limits;
  return proto.document.v1.internal.DocumentRule.Limits.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.document.v1.internal.DocumentRule.Limits} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.document.v1.internal.DocumentRule.Limits}
 */
proto.document.v1.internal.DocumentRule.Limits.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxValueCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.document.v1.internal.DocumentRule.Limits.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.document.v1.internal.DocumentRule.Limits.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.document.v1.internal.DocumentRule.Limits} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.DocumentRule.Limits.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxValueCount();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 maxValueCount = 1;
 * @return {number}
 */
proto.document.v1.internal.DocumentRule.Limits.prototype.getMaxValueCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.document.v1.internal.DocumentRule.Limits.prototype.setMaxValueCount = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string documentKind = 1;
 * @return {string}
 */
proto.document.v1.internal.DocumentRule.prototype.getDocumentKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.document.v1.internal.DocumentRule.prototype.setDocumentKind = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Limits limits = 2;
 * @return {?proto.document.v1.internal.DocumentRule.Limits}
 */
proto.document.v1.internal.DocumentRule.prototype.getLimits = function() {
  return /** @type{?proto.document.v1.internal.DocumentRule.Limits} */ (
    jspb.Message.getWrapperField(this, proto.document.v1.internal.DocumentRule.Limits, 2));
};


/** @param {?proto.document.v1.internal.DocumentRule.Limits|undefined} value */
proto.document.v1.internal.DocumentRule.prototype.setLimits = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.document.v1.internal.DocumentRule.prototype.clearLimits = function() {
  this.setLimits(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.document.v1.internal.DocumentRule.prototype.hasLimits = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string allowedAudiences = 3;
 * @return {!Array<string>}
 */
proto.document.v1.internal.DocumentRule.prototype.getAllowedAudiencesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.document.v1.internal.DocumentRule.prototype.setAllowedAudiencesList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.document.v1.internal.DocumentRule.prototype.addAllowedaudiences = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.document.v1.internal.DocumentRule.prototype.clearAllowedaudiencesList = function() {
  this.setAllowedAudiencesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.document.v1.internal.setDocumentRuleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.document.v1.internal.setDocumentRuleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.document.v1.internal.setDocumentRuleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.setDocumentRuleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentRule: (f = msg.getDocumentRule()) && proto.document.v1.internal.DocumentRule.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.document.v1.internal.setDocumentRuleRequest}
 */
proto.document.v1.internal.setDocumentRuleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.document.v1.internal.setDocumentRuleRequest;
  return proto.document.v1.internal.setDocumentRuleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.document.v1.internal.setDocumentRuleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.document.v1.internal.setDocumentRuleRequest}
 */
proto.document.v1.internal.setDocumentRuleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.document.v1.internal.DocumentRule;
      reader.readMessage(value,proto.document.v1.internal.DocumentRule.deserializeBinaryFromReader);
      msg.setDocumentRule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.document.v1.internal.setDocumentRuleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.document.v1.internal.setDocumentRuleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.document.v1.internal.setDocumentRuleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.setDocumentRuleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentRule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.document.v1.internal.DocumentRule.serializeBinaryToWriter
    );
  }
};


/**
 * optional DocumentRule documentRule = 1;
 * @return {?proto.document.v1.internal.DocumentRule}
 */
proto.document.v1.internal.setDocumentRuleRequest.prototype.getDocumentRule = function() {
  return /** @type{?proto.document.v1.internal.DocumentRule} */ (
    jspb.Message.getWrapperField(this, proto.document.v1.internal.DocumentRule, 1));
};


/** @param {?proto.document.v1.internal.DocumentRule|undefined} value */
proto.document.v1.internal.setDocumentRuleRequest.prototype.setDocumentRule = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.document.v1.internal.setDocumentRuleRequest.prototype.clearDocumentrule = function() {
  this.setDocumentRule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.document.v1.internal.setDocumentRuleRequest.prototype.hasDocumentrule = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.document.v1.internal.setDocumentRuleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.document.v1.internal.setDocumentRuleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.document.v1.internal.setDocumentRuleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.setDocumentRuleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.document.v1.internal.setDocumentRuleResponse}
 */
proto.document.v1.internal.setDocumentRuleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.document.v1.internal.setDocumentRuleResponse;
  return proto.document.v1.internal.setDocumentRuleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.document.v1.internal.setDocumentRuleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.document.v1.internal.setDocumentRuleResponse}
 */
proto.document.v1.internal.setDocumentRuleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.document.v1.internal.setDocumentRuleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.document.v1.internal.setDocumentRuleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.document.v1.internal.setDocumentRuleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.document.v1.internal.setDocumentRuleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.document.v1.internal.setDocumentRuleResponse.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.document.v1.internal.setDocumentRuleResponse.prototype.setSuccess = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.document.v1.internal);
